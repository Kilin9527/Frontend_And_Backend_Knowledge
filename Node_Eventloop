<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

* [Node Event Loop 学习记录](#node-event-loop-学习记录)
	* [一、Node 架构](#一-node-架构)
	* [参考链接](#参考链接)

<!-- /code_chunk_output -->

# Node Event Loop 学习记录

## 一、Node 架构

Node.js 主要分为四大部分，Node Standard Library，Node Bindings，V8 引擎，Libuv(EventLoop)，架构图如下:

![Node架构图](./assets/images/Node_Common_1.png)

- **Node Standard Library**: Node提供的基础类库，例如http,fs,buffer,net等。
- **Node Bindings**: 负责JS与C++代码的沟通，封装V8引擎和Libuv库，给Node Standard Library提供API支持。
- **Node底层Node主要运行层，本层是由C/C++代码实现**
  - **V8引擎**: 由Google开发维护的Javascript引擎，负责解析执行Javascript代码。
  - **Libuv**: 基于事件驱动的跨平台抽象层，针对不同的操作系统封装，提供统一的API。主要负责Node上的异步事件(I/O)处理。
  - **C-ares**: 提供异步处理DNS的能力。
  - **Http_parser,OpenSSLz,lib等**: 提供包括 http 解析、SSL、数据压缩等其他的能力。

**Node运行机制如下**：
1. V8引擎解析JS代码。
2. 解析后的代码调用Node API。
3. Libuv负责Node API执行，将不同的任务放入不同的线程，形成一个Event Loop，并以异步的方式将任务的执行结构返回给V8引擎。
4. V8引擎将结果返回给用户。

## 参考链接
https://github.com/yjhjstz/deep-into-node/blob/master/chapter1/chapter1-0.md
https://segmentfault.com/a/1190000017893482#articleHeader4